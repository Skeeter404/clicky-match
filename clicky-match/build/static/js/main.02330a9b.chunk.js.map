{"version":3,"sources":["components/head/Head.js","components/CharCard/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","width","height","alt","Card","props","onClick","handleClick","id","style","image","name","styles","body","backgroundImage","fontFamily","minHeight","margin","backgroundSize","backgroundRepeat","characters","cards","sort","Math","random","App","state","currentScore","highScore","clicked","shuffleCards","_this","setState","updateScore","newScore","indexOf","concat","Object","toConsumableArray","_this2","this","head_Head","map","gotObj","components_CharCard_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+BAYeA,SARA,kBAEfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,iBAAiBC,MAAM,QAAQC,OAAO,MAAMH,UAAU,2BAA2BI,IAAI,WCMnFC,SAVF,SAAAC,GAAK,OAElBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWO,QAAS,kBAAMD,EAAME,YAAYF,EAAMG,KAAKC,MAAO,CAACR,MAAO,UACnFL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKK,EAAMK,MAAOX,UAAU,+BAA+BI,IAAKE,EAAMM,KAAMF,MAAO,CAACR,MAAO,QAASC,OAAQ,sBCD7GU,SAAS,CACbC,KAAM,CACJC,gBAAiB,6BACjBC,WAAY,wBACZC,UAAW,QACXC,OAAQ,EACRC,eAAgB,QAChBC,iBAAkB,eAIhBC,EAAaC,EAAMC,KAAK,iBAAM,GAAMC,KAAKC,WA0E5BC,6MApEjBC,MAAQ,CACNN,aACAO,aAAc,EACdC,UAAW,EACXC,QAAS,MAGXC,aAAe,WACb,IAAMV,EAAaC,EAAMC,KAAK,iBAAM,GAAMC,KAAKC,WAC/CO,EAAKC,SAAS,CAAEZ,WAAYA,OAG9Ba,YAAc,WACZF,EAAKC,SAAS,CAAEL,aAAcI,EAAKL,MAAMC,aAAe,IACxD,IAAMO,EAAWH,EAAKL,MAAMC,aAAe,EAC3CI,EAAKD,eACDI,GAAYH,EAAKL,MAAME,WACzBG,EAAKC,SAAS,CAAEJ,UAAWM,OAI/B3B,YAAc,SAAAC,IAC4B,IAApCuB,EAAKL,MAAMG,QAAQM,QAAQ3B,IAC7BuB,EAAKC,SAAS,CAAEH,QAAO,GAAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAMN,EAAKL,MAAMG,SAAjB,CAA0BrB,MACjDuB,EAAKE,gBAELF,EAAKC,SAAS,CAAEL,aAAc,IAC9BI,EAAKC,SAAS,CAAEH,QAAS,KACzBE,EAAKD,yFAKI,IAAAS,EAAAC,KACP,OAEE5C,EAAAC,EAAAC,cAAA,OAAKW,MAAOG,EAAOC,KAAMd,UAAU,OACjCH,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,uGACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,YAAO0C,KAAKd,MAAMC,eAErC/B,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,YAAO0C,KAAKd,MAAME,aAEpChC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAEXqB,EAAWsB,IAAI,SAACC,GACd,OAAQ/C,EAAAC,EAAAC,cAAC8C,EAAD,CACNpC,GAAImC,EAAOnC,GACXqC,IAAKF,EAAOnC,GACZE,MAAOiC,EAAOjC,MACdC,KAAMgC,EAAOhC,KACbJ,YAAagC,EAAKhC,0BA1DtBuC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02330a9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Head.css\";\r\n\r\n\r\nconst Header = () => (\r\n\r\n<nav className=\"navbar navbar-light\">\r\n    <img src=\"images/Got.png\" width=\"700px\" height=\"100\" className=\"d-inline-block align-top\" alt=\"GoT\"/>\r\n</nav>\r\n\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n\r\n<div className=\"col-sm-3\" onClick={() => props.handleClick(props.id)} style={{width: '150px'}}>\r\n  <figure className=\"figure\">\r\n  <img src={props.image} className=\"figure-img img-fluid rounded\" alt={props.name} style={{width: \"150px\", height: \"225px\"}}/>\r\n</figure>\r\n</div>\r\n\r\n);\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport Header from \"./components/head/Head\";\nimport Card from \"./components/CharCard/Card\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nconst styles = {\n  body: {\n    backgroundImage: \"url('/images/Walkers.png')\",\n    fontFamily: \"'Fanwood Text', serif\",\n    minHeight: \"100vh\",\n    margin: 0,\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\"\n  }\n};\n\nconst characters = cards.sort(() => 0.5 - Math.random());\n\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    currentScore: 0,\n    highScore: 0,\n    clicked: []\n  };\n\n  shuffleCards = () => {\n    const characters = cards.sort(() => 0.5 - Math.random());\n    this.setState({ characters: characters });\n  };\n\n  updateScore = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n    const newScore = this.state.currentScore + 1;\n    this.shuffleCards();\n    if (newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore })\n    };\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.setState({ clicked: [...this.state.clicked, id] });\n      this.updateScore();\n    } else {\n      this.setState({ currentScore: 0 });\n      this.setState({ clicked: [] });\n      this.shuffleCards();\n    };\n  };\n\n\n      render() {\n        return (\n\n          <div style={styles.body} className=\"App\">\n            <Header />\n            <br></br>\n            <h4 className=\"text align: center\">Click on an image to increase your score! Don't click on any image more than once, in order to win!</h4>\n            <br></br>\n            <div>\n              <h4>Current Score: <span>{this.state.currentScore}</span></h4>\n              \n              <h4>High Score: <span>{this.state.highScore}</span></h4>\n            </div>\n            <br></br>\n            <section>\n              <div className=\"row container-fluid\">\n                {\n                  characters.map((gotObj) => {\n                    return (<Card\n                      id={gotObj.id}\n                      key={gotObj.id}\n                      image={gotObj.image}\n                      name={gotObj.name}\n                      handleClick={this.handleClick} />)\n                  })\n                }\n\n              </div>\n            </section>\n          </div>\n\n        );\n      }\n    }\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}